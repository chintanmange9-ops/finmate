import React, { useState } from 'react';
import { Card } from './ui/card';
import { Button } from './ui/button';
import { Progress } from './ui/progress';
import { Badge } from './ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';
import { Download, Share2, TrendingUp, TrendingDown, AlertTriangle, CheckCircle } from 'lucide-react';
import { useTransactions } from '../contexts/TransactionContext';
import { toast } from 'sonner@2.0.3';

export function Reports() {
  const { transactions } = useTransactions();
  const [selectedMonth, setSelectedMonth] = useState('current');

  const handleExportReport = () => {
    const reportData = {
      reportDate: new Date().toISOString(),
      summary: currentMonthData,
      transactions: transactions,
      trends: trendData
    };
    
    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `financial-report-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Report exported successfully!');
  };

  const handleShareReport = async () => {
    const reportText = `üí∞ Financial Report - ${new Date().toLocaleDateString('en-IN')}

üìä Monthly Summary:
‚Ä¢ Income: ‚Çπ${currentMonthData.totalIncome.toLocaleString('en-IN')}
‚Ä¢ Expenses: ‚Çπ${currentMonthData.totalExpenses.toLocaleString('en-IN')}
‚Ä¢ Savings: ‚Çπ${currentMonthData.actualSavings.toLocaleString('en-IN')}

üéØ Goal Progress: ${Math.round(savingsProgress)}% of savings target achieved

Generated by Smart Finance App`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Financial Report',
          text: reportText,
        });
        toast.success('Report shared successfully!');
      } catch (error) {
        // Fallback to clipboard
        navigator.clipboard.writeText(reportText);
        toast.success('Report copied to clipboard!');
      }
    } else {
      // Fallback for browsers without Web Share API
      navigator.clipboard.writeText(reportText);
      toast.success('Report copied to clipboard!');
    }
  };

  // Mock data for current month
  const currentMonthData = {
    totalIncome: 50000,
    totalExpenses: 38500,
    savingsTarget: 15000,
    actualSavings: 11500,
    categories: [
      { name: 'Food', amount: 12000, percentage: 31, trend: '+15%', color: '#10B981' },
      { name: 'Rent', amount: 15000, percentage: 39, trend: '0%', color: '#8B5CF6' },
      { name: 'Transport', amount: 3500, percentage: 9, trend: '-5%', color: '#F59E0B' },
      { name: 'Shopping', amount: 8000, percentage: 21, trend: '+25%', color: '#EF4444' }
    ]
  };

  // Trend data for the last 6 months
  const trendData = [
    { month: 'Jul', income: 48000, expenses: 35000, savings: 13000 },
    { month: 'Aug', income: 48000, expenses: 36500, savings: 11500 },
    { month: 'Sep', income: 50000, expenses: 37000, savings: 13000 },
    { month: 'Oct', income: 50000, expenses: 38000, savings: 12000 },
    { month: 'Nov', income: 52000, expenses: 39000, savings: 13000 },
    { month: 'Dec', income: 50000, expenses: 38500, savings: 11500 }
  ];

  const savingsProgress = (currentMonthData.actualSavings / currentMonthData.savingsTarget) * 100;
  const expenseRatio = (currentMonthData.totalExpenses / currentMonthData.totalIncome) * 100;

  return (
    <div className="p-4 space-y-4">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl mb-0">Reports</h1>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            className="flex items-center gap-2"
            onClick={handleExportReport}
          >
            <Download className="w-4 h-4" />
            Export
          </Button>
          <Button 
            variant="outline" 
            size="sm" 
            className="flex items-center gap-2"
            onClick={handleShareReport}
          >
            <Share2 className="w-4 h-4" />
            Share
          </Button>
        </div>
      </div>

      <Tabs defaultValue="summary" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="summary">Summary</TabsTrigger>
          <TabsTrigger value="trends">Trends</TabsTrigger>
          <TabsTrigger value="goals">Goals</TabsTrigger>
        </TabsList>

        <TabsContent value="summary" className="space-y-4">
          {/* Monthly Overview */}
          <Card className="p-4">
            <h3 className="mb-4">December 2024 Summary</h3>
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div className="text-center p-3 bg-green-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Total Income</p>
                <p className="text-lg text-green-600">‚Çπ {currentMonthData.totalIncome.toLocaleString('en-IN')}</p>
              </div>
              <div className="text-center p-3 bg-red-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Total Expenses</p>
                <p className="text-lg text-red-600">‚Çπ {currentMonthData.totalExpenses.toLocaleString('en-IN')}</p>
              </div>
            </div>
            <div className="text-center p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-gray-600 mb-1">Net Savings</p>
              <p className="text-xl text-blue-600">‚Çπ {currentMonthData.actualSavings.toLocaleString('en-IN')}</p>
              <p className="text-sm text-gray-500">({Math.round(savingsProgress)}% of target)</p>
            </div>
          </Card>

          {/* Expense Breakdown */}
          <Card className="p-4">
            <h3 className="mb-4">Expense Breakdown</h3>
            <div className="h-48 mb-4">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={currentMonthData.categories}
                    dataKey="amount"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    outerRadius={60}
                    innerRadius={30}
                    strokeWidth={0}
                  >
                    {currentMonthData.categories.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                </PieChart>
              </ResponsiveContainer>
            </div>
            <div className="space-y-3">
              {currentMonthData.categories.map((category, index) => (
                <div key={index} className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div 
                      className="w-3 h-3 rounded-full" 
                      style={{ backgroundColor: category.color }}
                    ></div>
                    <span>{category.name}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span>‚Çπ {category.amount.toLocaleString('en-IN')}</span>
                    <Badge 
                      variant={category.trend.startsWith('+') ? "destructive" : category.trend.startsWith('-') ? "default" : "secondary"}
                      className="text-xs"
                    >
                      {category.trend}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </Card>

          {/* AI Insights */}
          <Card className="p-4 bg-blue-50 border-blue-200">
            <h3 className="mb-3">AI Insights - December Highlights</h3>
            <div className="space-y-3">
              <div className="flex items-start gap-3">
                <AlertTriangle className="w-5 h-5 text-amber-500 mt-0.5" />
                <div>
                  <p className="text-sm mb-1">‚ö†Ô∏è High Spending Alert</p>
                  <p className="text-sm text-gray-600">Food expenses increased by 15% compared to last month. Consider meal planning to reduce costs.</p>
                </div>
              </div>
              <div className="flex items-start gap-3">
                <TrendingUp className="w-5 h-5 text-green-500 mt-0.5" />
                <div>
                  <p className="text-sm mb-1">üìà Positive Trend</p>
                  <p className="text-sm text-gray-600">You've successfully reduced transportation costs by 5% this month!</p>
                </div>
              </div>
              <div className="flex items-start gap-3">
                <CheckCircle className="w-5 h-5 text-blue-500 mt-0.5" />
                <div>
                  <p className="text-sm mb-1">üéØ Goal Progress</p>
                  <p className="text-sm text-gray-600">You're 77% towards your savings goal. Just ‚Çπ3,500 more to reach your target!</p>
                </div>
              </div>
            </div>
          </Card>
        </TabsContent>

        <TabsContent value="trends" className="space-y-4">
          {/* Income vs Expenses Trend */}
          <Card className="p-4">
            <h3 className="mb-4">6-Month Income vs Expenses Trend</h3>
            <div className="h-48">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={trendData}>
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Line type="monotone" dataKey="income" stroke="#10B981" strokeWidth={2} />
                  <Line type="monotone" dataKey="expenses" stroke="#EF4444" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </div>
            <div className="flex justify-center gap-6 mt-4">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-green-500"></div>
                <span className="text-sm">Income</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 rounded-full bg-red-500"></div>
                <span className="text-sm">Expenses</span>
              </div>
            </div>
          </Card>

          {/* Monthly Comparisons */}
          <Card className="p-4">
            <h3 className="mb-4">Month-over-Month Changes</h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
                <span>Income</span>
                <div className="flex items-center gap-2">
                  <TrendingDown className="w-4 h-4 text-red-500" />
                  <span className="text-red-600">-‚Çπ2,000 (-3.8%)</span>
                </div>
              </div>
              <div className="flex justify-between items-center p-3 bg-red-50 rounded-lg">
                <span>Expenses</span>
                <div className="flex items-center gap-2">
                  <TrendingDown className="w-4 h-4 text-green-500" />
                  <span className="text-green-600">-‚Çπ500 (-1.3%)</span>
                </div>
              </div>
              <div className="flex justify-between items-center p-3 bg-blue-50 rounded-lg">
                <span>Savings</span>
                <div className="flex items-center gap-2">
                  <TrendingDown className="w-4 h-4 text-red-500" />
                  <span className="text-red-600">-‚Çπ1,500 (-11.5%)</span>
                </div>
              </div>
            </div>
          </Card>
        </TabsContent>

        <TabsContent value="goals" className="space-y-4">
          {/* Savings Goal Progress */}
          <Card className="p-4">
            <h3 className="mb-4">Monthly Savings Goal</h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span>Progress</span>
                <span>{Math.round(savingsProgress)}% Complete</span>
              </div>
              <Progress value={savingsProgress} className="h-3" />
              <div className="flex justify-between text-sm text-gray-600">
                <span>‚Çπ {currentMonthData.actualSavings.toLocaleString('en-IN')} saved</span>
                <span>‚Çπ {currentMonthData.savingsTarget.toLocaleString('en-IN')} target</span>
              </div>
              <div className="text-center p-3 bg-amber-50 rounded-lg">
                <p className="text-sm text-amber-700">
                  {savingsProgress < 100 
                    ? `‚Çπ ${(currentMonthData.savingsTarget - currentMonthData.actualSavings).toLocaleString('en-IN')} remaining to reach your goal`
                    : 'üéâ Congratulations! You\'ve reached your savings goal!'
                  }
                </p>
              </div>
            </div>
          </Card>

          {/* Expense Budget vs Actual */}
          <Card className="p-4">
            <h3 className="mb-4">Budget vs Actual Spending</h3>
            <div className="space-y-4">
              {currentMonthData.categories.map((category, index) => {
                const budget = category.amount * 0.9; // Assume budget is 90% of actual for demo
                const progress = (category.amount / (category.amount / 0.9)) * 100;
                const isOverBudget = progress > 100;
                
                return (
                  <div key={index} className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span>{category.name}</span>
                      <span className={isOverBudget ? 'text-red-600' : 'text-green-600'}>
                        ‚Çπ {category.amount.toLocaleString('en-IN')} / ‚Çπ {Math.round(budget * 1.1).toLocaleString('en-IN')}
                      </span>
                    </div>
                    <Progress 
                      value={Math.min(progress, 100)} 
                      className={`h-2 ${isOverBudget ? '[&>div]:bg-red-500' : '[&>div]:bg-green-500'}`} 
                    />
                    {isOverBudget && (
                      <p className="text-xs text-red-600">
                        Over budget by ‚Çπ {(category.amount - budget * 1.1).toLocaleString('en-IN')}
                      </p>
                    )}
                  </div>
                );
              })}
            </div>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}